<?php
namespace LTItem\SpecialItems\Armor;

use LTItem\SpecialItems\Armor;
use LTItem\Mana\Mana;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\level\particle\DustParticle;
use pocketmine\level\particle\GenericParticle;
use pocketmine\level\particle\Particle;
use pocketmine\level\particle\PortalParticle;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\NamedTag;
use pocketmine\nbt\tag\StringTag;

class ManaArmor extends Armor implements Mana
{
    const MAX_MANA = 10000;
    private int $Mana;
    private int $lastDamage = 0;
    public function __construct(array $conf, int $count, \pocketmine\nbt\tag\CompoundTag $nbt, $init = true)
    {
        parent::__construct($conf, $count, $nbt, $init);

        $nbt = $this->getNamedTag();
        if(!isset($nbt['attribute'][25])){
            $nbt['attribute'][25]=new StringTag('',$nbt['attribute'][25]??0);//25 对于 ManaArmor来说 25就是Mana
            $this->setNamedTag($nbt);
        }
        $this->Mana = $nbt['attribute'][25];
        $this->updateName();
    }

    /**
     * 更新名字
     */
    public function updateName(){
        $this->setCustomName($this->getLTName().PHP_EOL.'§eMana:'.$this->getMana(), true);
    }

    /**
     * @return string 获取这个物品的绑定
     */
    public function getOwner(): string
    {
        return $this->getBinding();
    }

    /**
     * @return int 最大Mana
     */
    public function getMaxMana(): int
    {
        return self::MAX_MANA;
    }

    /**
     * @return int 剩余Mana
     */
    public function getMana(): int
    {
        return $this->Mana;
    }

    /**
     * 保存Mana
     */
    public function saveMana(){
        $tag = $this->getNamedTag();
        $tag['attribute'][25] = new StringTag('', $this->Mana);
        $this->setNamedTag($tag);
    }

    /**
     * @param int $mana
     * @return mixed|void
     */
    public function addMana(int $mana)
    {
        $this->Mana += $mana;
        if ($this->Mana>$this->getMaxMana()){
            $this->Mana = $this->getMaxMana();
        }
        $this->saveMana();
    }
    public function setMana(int $mane){
        $this->Mana = $mane;
        if ($this->Mana>$this->getMaxMana()){
            $this->Mana = $this->getMaxMana();
        }
        $this->saveMana();
    }
    /**
     * @param int $mana
     * @return bool
     */
    public function consumptionMana(int $mana): bool
    {
        if ($this->Mana < $mana)return false;
        $this->Mana -= $mana;
        $this->saveMana();
        return true;
    }

    public function onTick(\pocketmine\Player $player, int $index, \pocketmine\inventory\BaseInventory $inventory): bool
    {
        if ($player->getServer()->getTick() - $this->lastDamage > 10){
            if (!$this->canUse($player)){
                $this->lastDamage = $player->getServer()->getTick();
                $player->attack($player->getMaxHealth() * 0.1, new EntityDamageEvent($player, EntityDamageEvent::CAUSE_PUNISHMENT, $player->getMaxHealth() * 0.1, true));
            }
            if ($this->getMana() < self::MAX_MANA){
                $mana = min(self::MAX_MANA - $this->getMana(), 100);
                if ($player->getBuff()->consumptionMana($mana)){
                    $this->addMana($mana);
                }
            }
        }
        return true;
    }

    public function canPutMana(): bool
    {
        return false;
    }
    public function canUse(\pocketmine\Player $player, $playerCheck = true):bool
    {
        return parent::canUse($player, $playerCheck); // TODO: Change the autogenerated stub
    }
    public static function spawnParticle(Position $position, $damager = null){
        $level = $position->getLevel();
        $r = 2 / 180;
        $h = 3 / 360;
        $y = $position->getY() - 0.6;
        for ($j = 0; $j < 360; $j++){
            $c = 180 - abs($j - 180);
            $g = 360 / max(1, $c);
            for($i = 1; $i <= $c ; $i++){
                $a=$position->getX() + $r * $c * cos($i * $g * 3.14 / 90) ;
                $b=$position->getZ() + $r * $c * sin($i * $g * 3.14 / 90) ;
                $level->addParticle(new GenericParticle(new Vector3($a,$y + $h * $j,$b),Particle::TYPE_TOWN_AURA));
            }
        }
    }
}